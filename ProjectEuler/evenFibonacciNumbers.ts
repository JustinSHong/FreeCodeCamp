// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence that do not exceed the nth term, find the sum of the even-valued terms.

// iterative solution - bottom up approach
const fiboEvenSumBottomUp = (n: number): number => {
	const fibNums = [0, 1]
	let sum = 0

	for (let i = 2; i <= n + 1; i++) {
		const next = fibNums[i - 1] + fibNums[i - 2]
		if (next % 2 === 0) {
			sum += next
		}
		fibNums[i] = next
	}

	return sum
}

// top down solution
const fiboEvenSumTopDown = (n: number): number => {
	const initCache = (n: number) => {
		const cache: any = {}
		for (let i = 0; i <= n + 1; i++) {
			cache[i] = null
		}
		return cache
	}

	const memo = initCache(n)
	let sum = 0

	const findEvenSum = (n: number): number => {
		if (memo[n] === null) {
			if (n <= 1) {
				memo[n] = n
			} else {
				// current value is not in cache
				memo[n] = findEvenSum(n - 1) + findEvenSum(n - 2)
				if (memo[n] % 2 === 0) {
					sum += memo[n]
				}
			}
		}
		return memo[n]
	}

	findEvenSum(n + 1)
	return sum
}

// space efficient solution
const fiboEvenSumEfficientSpace = (n: number): number => {
	let sum = 0
	let a = 0,
		b = 1,
		c

	for (let i = 2; i <= n + 1; i++) {
		c = a + b
		a = b
		b = c

		if (c % 2 === 0) {
			sum += c
		}
	}

	return sum
}

fiboEvenSumBottomUp(10) // 44
fiboEvenSumBottomUp(18) // 3382
fiboEvenSumBottomUp(23) // 60696
fiboEvenSumBottomUp(43) // 350704366

fiboEvenSumTopDown(10) // 44
fiboEvenSumTopDown(18) // 3382
fiboEvenSumTopDown(23) // 60696
fiboEvenSumTopDown(43) // 350704366
